using System;using System.Collections.Generic;using System.Web;using System.Xml;using System.Data;using System.IO;using System.Text;using System.Web.UI.WebControls;using System.Globalization;using System.Web.Security;using System.Web.UI;using System.Web.UI.HtmlControls;using System.Net;using System.Collections.Specialized;namespace DFSK{    public class Library    {        static public string QuitarPuntoOComa(string sValor)        {            //----------------------------------------------             // Quitar los símbolos             //----------------------------------------------             int i;            string sTmp;            sTmp = "";            for (i = 0; i < sValor.Length; i++)            {                if (sValor[i] != '.' && sValor[i] != ',')                    sTmp = sTmp + sValor[i].ToString();            }            return sTmp;        }        static public string QuitarPunto(string sValor)        {            //----------------------------------------------             // Quitar los símbolos             //----------------------------------------------             int i;            string sTmp;            sTmp = "";            for (i = 0; i < sValor.Length; i++)            {                if (sValor[i] != '.')                    sTmp = sTmp + sValor[i].ToString();            }            return sTmp;        }        static public string QuitarDV(string sValor)        {            string[] str = sValor.Split('-');            return str[0];        }        static public DataTable ReturnDatatble(XmlNode elem)        {            DataTable dt = null;            try            {                XmlDocument doc = new XmlDocument();                doc.AppendChild(doc.ImportNode(elem, true));                DataSet dts = new DataSet();                XmlTextReader reader = new XmlTextReader(new StringReader(doc.OuterXml));                dts.ReadXml(reader);                dt = dts.Tables[0];            }            catch (Exception ex)            {            }            return dt;        }        public static string ConvertStringToHex(String plainText)        {            char[] charArray = plainText.ToCharArray();            StringBuilder sb = new StringBuilder();            int num;            string hex;            for (int i = 0; i < charArray.Length; i++)            {                num = Convert.ToInt32(charArray[i]);                hex = num.ToString("x");                sb.Append(hex);            }            return sb.ToString();        }        public static string ConvertHexToString(String hexaText)        {            StringBuilder sb1 = new StringBuilder();            for (int i = 0; i < hexaText.Length; i++)            {                if (i > 0 && i % 2 == 0)                {                    sb1.Append("-");                }                sb1.Append(hexaText[i]);            }            hexaText = sb1.ToString();            string[] strArray = hexaText.Split(new char[] { '-' });            StringBuilder sb = new StringBuilder();            for (int i = 0; i < strArray.Length; ++i)            {                sb.Append((char)Convert.ToInt32(strArray[i], 16));            }            return sb.ToString();        }        /// <summary>        /// Colorea una fila del Gridview.        /// </summary>        public static void PintaFilaGrilla(object sender, GridViewRowEventArgs e)        {            if (e.Row.RowType == DataControlRowType.DataRow)            {                e.Row.Attributes.Add("OnMouseOver", "Resaltar_On(this);");                e.Row.Attributes.Add("OnMouseOut", "Resaltar_Off(this);");            }        }        /// <summary>        /// Colorea una fila del Radgriview.        /// </summary>        ///         //Comentado 17/08/2016, Consultar con Rrojas        //public static void PintaFilaGrilla(object sender, GridItemEventArgs e)        //{        //    if (e.Item.ItemType == GridItemType.Item || e.Item.ItemType == GridItemType.AlternatingItem)        //    {        //        e.Item.Attributes.Add("OnMouseOver", "ResaltarRadgridview_On(this);");        //        e.Item.Attributes.Add("OnMouseOut", "ResaltarRadgridview_Off(this);");        //    }        //}                public static string DV(string r)        {            int suma = 0;            for (int x = r.Length - 1; x >= 0; x--)                suma += int.Parse(char.IsDigit(r[x]) ? r[x].ToString() : "0") * (((r.Length - (x + 1)) % 6) + 2);            int numericDigito = (11 - suma % 11);            string digito = numericDigito == 11 ? "0" : numericDigito == 10 ? "K" : numericDigito.ToString();            return digito;        }        public static String GetNameFile(String strUrl)        {            String strFileName = string.Empty;            char[] delimiterChars = { '/' };            String[] str = strUrl.Split(delimiterChars);            strFileName = str[str.Length - 1];            return strFileName;        }        public static DataSet transforma_xml_rs(string xml)        {            DataSet oData = new DataSet();            StringReader oSR = new StringReader(xml);            XmlTextReader oXMLTR = new XmlTextReader(oSR);            oData.ReadXml(oXMLTR);            return oData;        }        public static bool compararFechas(string finicio, string ffinal)        {            try            {                if (finicio != string.Empty && ffinal != string.Empty)                {                    DateTimeFormatInfo myDTFI = new CultureInfo("es-CL", false).DateTimeFormat;                    myDTFI.ShortDatePattern = "dd/MM/yyyy";                    DateTime dtfinicio = DateTime.Parse(finicio, myDTFI);                    DateTime dtffinal = DateTime.Parse(ffinal, myDTFI);                    if (dtfinicio > dtffinal)                    {                        return false;                    }                    else                    {                        return true;                    }                }                else                {                    return true;                }            }            catch (Exception)            {                return false;            }        }        /// <summary>        /// This method prepares an Html form which holds all data in hidden field in the addetion to form submitting script.        /// </summary>        /// <param name="url">The destination Url to which the post and redirection will occur, the Url can be in the same App or ouside the App.</param>        /// <param name="data">A collection of data that will be posted to the destination Url.</param>        /// <returns>Returns a string representation of the Posting form.</returns>        /// <Author>Samer Abu Rabie</Author>        public static String PreparePOSTForm(string url, NameValueCollection data)        {            //Set a name for the form            string formID = "PostForm";            //Build the form using the specified data to be posted.            StringBuilder strForm = new StringBuilder();            strForm.Append("<form id=\"" + formID + "\" name=\"" + formID + "\" action=\"" + url + "\" method=\"POST\">");            foreach (string key in data)            {                strForm.Append("<input type=\"hidden\" name=\"" + key + "\" value=\"" + data[key] + "\">");            }            strForm.Append("</form>");            //Build the JavaScript which will do the Posting operation.            StringBuilder strScript = new StringBuilder();            strScript.Append("<script language='javascript'>");            strScript.Append("var v" + formID + " = document." + formID + ";");            strScript.Append("v" + formID + ".submit();");            strScript.Append("</script>");            //Return the form and the script concatenated. (The order is important, Form then JavaScript)            return strForm.ToString() + strScript.ToString();        }        /// <summary>        /// POST data and Redirect to the specified url using the specified page.        /// </summary>        /// <param name="page">The page which will be the referrer page.</param>        /// <param name="destinationUrl">The destination Url to which the post and redirection is occuring.</param>        /// <param name="data">The data should be posted.</param>        /// <Author>Samer Abu Rabie</Author>        public static void RedirectAndPOST(Page page, string destinationUrl, NameValueCollection data)        {            //Prepare the Posting form            string strForm = PreparePOSTForm(destinationUrl, data);            //Add a literal control the specified page holding the Post Form, this is to submit the Posting form with the request.            page.Controls.Add(new LiteralControl(strForm));        }    }}