using System;using System.Collections.Generic;using System.Web;using System.Data.SqlClient;using System.Data;using System.Configuration;using System.Xml;namespace DFSK{    public class DataAccess    {        //CONSTRUCTOR        public DataAccess() { }        #region "Pais"        public DataSet GetPais(String sId_pais)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlDataAdapter da = new SqlDataAdapter();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_PAIS_Get";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 3                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 4                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 5                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                da.SelectCommand = cmd;                dset = new DataSet();                da.Fill(dset, "DTS");                if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                {                    String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                    String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                    String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                    String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            da.Dispose();            return dset;        }        public DataSet IUDPais(String sId_pais, String sDesc, Boolean? bVigencia, String sMoneda, Boolean bDelete)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_PAIS_IUD";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@DESC", SqlDbType.VarChar)).Value = sDesc;                //PARAM 3                cmd.Parameters.Add(new SqlParameter("@VIGENCIA", SqlDbType.Bit)).Value = bVigencia;                //PARAM 4                cmd.Parameters.Add(new SqlParameter("@MONEDA", SqlDbType.VarChar)).Value = sMoneda;                //PARAM 5                cmd.Parameters.Add(new SqlParameter("@OPERDELETE", SqlDbType.Bit)).Value = bDelete;                //PARAM 6                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 7                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 8                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 9                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                cmd.ExecuteNonQuery();                String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            return dset;        }        #endregion        #region "Version"        public DataSet GetVersion(String sId_pais, String sId_marca, String sId_modelo, String sId_Version)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlDataAdapter da = new SqlDataAdapter();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_VERSION_Get";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                //PARAM 3                cmd.Parameters.Add(new SqlParameter("@ID_MODELO", SqlDbType.VarChar)).Value = sId_modelo;                //PARAM 4                cmd.Parameters.Add(new SqlParameter("@ID_VERSION", SqlDbType.VarChar)).Value = sId_Version;                //PARAM 5                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 6                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 7                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 8                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                da.SelectCommand = cmd;                dset = new DataSet();                da.Fill(dset, "DTS");                if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                {                    String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                    String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                    String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                    String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            da.Dispose();            return dset;        }        public DataSet IUDVersion(String sId_pais, String sId_marca, String sId_modelo, String sId_version, String sDesc, Boolean? bVigencia, Boolean bDelete)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_VERSION_IUD";                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                cmd.Parameters.Add(new SqlParameter("@ID_MODELO", SqlDbType.VarChar)).Value = sId_modelo;                cmd.Parameters.Add(new SqlParameter("@ID_VERSION", SqlDbType.VarChar)).Value = sId_version;                cmd.Parameters.Add(new SqlParameter("@DESC", SqlDbType.VarChar)).Value = sDesc;                cmd.Parameters.Add(new SqlParameter("@VIGENCIA", SqlDbType.Bit)).Value = bVigencia;                cmd.Parameters.Add(new SqlParameter("@OPERDELETE", SqlDbType.Bit)).Value = bDelete;                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                cmd.ExecuteNonQuery();                String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            return dset;        }        #endregion        #region "Imagen"        public DataSet GetImagen(String sId_pais, String sId_marca, String sId_modelo, String sId_Version, String sId_Imagen, String sTipo)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlDataAdapter da = new SqlDataAdapter();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_IMAGEN_Get";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                //PARAM 3                cmd.Parameters.Add(new SqlParameter("@ID_MODELO", SqlDbType.VarChar)).Value = sId_modelo;                //PARAM 4                cmd.Parameters.Add(new SqlParameter("@ID_VERSION", SqlDbType.VarChar)).Value = sId_Version;                //PARAM 5                cmd.Parameters.Add(new SqlParameter("@ID_IMG", SqlDbType.VarChar)).Value = sId_Imagen;                //PARAM 6                cmd.Parameters.Add(new SqlParameter("@TIPO", SqlDbType.VarChar)).Value = sTipo;                //PARAM 7                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 8                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 9                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 10                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                da.SelectCommand = cmd;                dset = new DataSet();                da.Fill(dset, "Imagenes");                if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                {                    String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                    String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                    String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                    String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            da.Dispose();            return dset;        }        public DataSet IUDImagen(String sId_pais, String sId_marca, String sId_modelo, String sId_version, String sId_imagen, String sTipo, String sPath_img_A, String sPath_img_B, Boolean bDelete)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_IMAGEN_IUD";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                //PARAM 3                cmd.Parameters.Add(new SqlParameter("@ID_MODELO", SqlDbType.VarChar)).Value = sId_modelo;                //PARAM 4                cmd.Parameters.Add(new SqlParameter("@ID_VERSION", SqlDbType.VarChar)).Value = sId_version;                //PARAM 5                cmd.Parameters.Add(new SqlParameter("@ID_IMG", SqlDbType.VarChar)).Value = sId_imagen;                //PARAM 6                cmd.Parameters.Add(new SqlParameter("@TIPO", SqlDbType.VarChar)).Value = sTipo;                //PARAM 7                cmd.Parameters.Add(new SqlParameter("@PATH_IMG_A", SqlDbType.VarChar)).Value = sPath_img_A;                //PARAM 8                cmd.Parameters.Add(new SqlParameter("@PATH_IMG_B", SqlDbType.VarChar)).Value = sPath_img_B;                //PARAM 9                cmd.Parameters.Add(new SqlParameter("@OPERDELETE", SqlDbType.Bit)).Value = bDelete;                //PARAM 10                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 11                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 12                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 13                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                cmd.ExecuteNonQuery();                String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            return dset;        }        #endregion        #region "Motivo"        public DataSet GetMotivo(String sId_pais, String sId_marca, String sId_motivo)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlDataAdapter da = new SqlDataAdapter();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_MOTIVO_Get";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                //PARAM 3                cmd.Parameters.Add(new SqlParameter("@ID_MOT", SqlDbType.VarChar)).Value = sId_motivo;                //PARAM 4                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 5                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 6                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 7                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                da.SelectCommand = cmd;                dset = new DataSet();                da.Fill(dset, "Motivos");                if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                {                    String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                    String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                    String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                    String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            da.Dispose();            return dset;        }        public DataSet IUDMotivo(String sId_pais, String sId_marca, String sId_motivo, String sDesc, Boolean? bVigencia, Boolean bDelete)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_MOTIVO_IUD";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                //PARAM 3                cmd.Parameters.Add(new SqlParameter("@ID_MOT", SqlDbType.VarChar)).Value = sId_motivo;                //PARAM 4                cmd.Parameters.Add(new SqlParameter("@DESC", SqlDbType.VarChar)).Value = sDesc;                //PARAM 5                cmd.Parameters.Add(new SqlParameter("@VIGENCIA", SqlDbType.Bit)).Value = bVigencia;                //PARAM 6                cmd.Parameters.Add(new SqlParameter("@OPERDELETE", SqlDbType.Bit)).Value = bDelete;                //PARAM 7                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 8                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 9                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 10                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                cmd.ExecuteNonQuery();                String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            return dset;        }        #endregion        #region "Modelo"        public DataSet GetModelo(String sId_pais, String sId_marca, String sId_modelo)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlDataAdapter da = new SqlDataAdapter();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_MODELO_Get";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                //PARAM 3                cmd.Parameters.Add(new SqlParameter("@ID_MODELO", SqlDbType.VarChar)).Value = sId_modelo;                //PARAM 4                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 5                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 6                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 7                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                da.SelectCommand = cmd;                dset = new DataSet();                da.Fill(dset, "DTS");                if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                {                    String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                    String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                    String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                    String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            da.Dispose();            return dset;        }        public DataSet IUDModelo(String sId_pais, String sId_marca, String sId_modelo, String sDesc, Boolean? bVigencia, Boolean bDelete)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_MODELO_IUD";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                //PARAM 3                cmd.Parameters.Add(new SqlParameter("@ID_MODELO", SqlDbType.VarChar)).Value = sId_modelo;                //PARAM 4                cmd.Parameters.Add(new SqlParameter("@DESC", SqlDbType.VarChar)).Value = sDesc;                //PARAM 5                cmd.Parameters.Add(new SqlParameter("@VIGENCIA", SqlDbType.Bit)).Value = bVigencia;                //PARAM 6                cmd.Parameters.Add(new SqlParameter("@OPERDELETE", SqlDbType.Bit)).Value = bDelete;                //PARAM 7                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 8                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 9                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 10                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                cmd.ExecuteNonQuery();                String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            return dset;        }        #endregion        #region "Marca"        public DataSet GetMarca(String sId_pais, String sId_marca)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlDataAdapter da = new SqlDataAdapter();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_MARCA_Get";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                //PARAM 3                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 4                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 5                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 6                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                da.SelectCommand = cmd;                dset = new DataSet();                da.Fill(dset, "DTS");                if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                {                    String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                    String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                    String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                    String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            da.Dispose();            return dset;        }        public DataSet IUDMarca(String sId_pais, String sId_marca, String sDesc, Boolean? bVigencia, Boolean bDelete)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_MARCA_IUD";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                //PARAM 3                cmd.Parameters.Add(new SqlParameter("@DESC", SqlDbType.VarChar)).Value = sDesc;                //PARAM 4                cmd.Parameters.Add(new SqlParameter("@VIGENCIA", SqlDbType.Bit)).Value = bVigencia;                //PARAM 5                cmd.Parameters.Add(new SqlParameter("@OPERDELETE", SqlDbType.Bit)).Value = bDelete;                //PARAM 6                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 7                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 8                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 9                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                cmd.ExecuteNonQuery();                String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            return dset;        }        #endregion        #region "Estado"        public DataSet GetEstado(String sId_pais, String sId_marca, String sId_tipo, String sId_estado)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlDataAdapter da = new SqlDataAdapter();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_ESTADO_Get";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                //PARAM 3                cmd.Parameters.Add(new SqlParameter("@ID_TIPO", SqlDbType.VarChar)).Value = sId_tipo;                //PARAM 4                cmd.Parameters.Add(new SqlParameter("@ID_ESTADO", SqlDbType.VarChar)).Value = sId_estado;                //PARAM 5                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 6                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 7                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 8                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                da.SelectCommand = cmd;                dset = new DataSet();                da.Fill(dset, "DTS");                if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                {                    String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                    String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                    String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                    String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            da.Dispose();            return dset;        }        public DataSet IUDEstado(String sId_pais, String sId_marca, String sId_tipo, String sId_estado, String sDesc, Boolean? bVigencia, Boolean bDelete)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_ESTADO_IUD";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                //PARAM 3                cmd.Parameters.Add(new SqlParameter("@ID_TIPO", SqlDbType.VarChar)).Value = sId_tipo;                //PARAM 4                cmd.Parameters.Add(new SqlParameter("@ID_ESTADO", SqlDbType.VarChar)).Value = sId_estado;                //PARAM 5                cmd.Parameters.Add(new SqlParameter("@DESC", SqlDbType.VarChar)).Value = sDesc;                //PARAM 6                cmd.Parameters.Add(new SqlParameter("@OPERDELETE", SqlDbType.Bit)).Value = bDelete;                //PARAM 7                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 8                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 9                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 10                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                cmd.ExecuteNonQuery();                String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            return dset;        }        #endregion        #region "Distribución Geográfica"        public DataSet GetDistGeo(String sId_pais, String sId_dist, Int16 sNivel, String sValue1, String sValue2, String sValue3)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlDataAdapter da = new SqlDataAdapter();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_DIST_GEO_Get";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_DIST", SqlDbType.VarChar)).Value = sId_dist;                //PARAM 3                cmd.Parameters.Add(new SqlParameter("@NIVEL", SqlDbType.Int)).Value = sNivel;                //PARAM 4                if (sValue1 != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@VALUE1", SqlDbType.VarChar)).Value = sValue1;                else                    cmd.Parameters.Add(new SqlParameter("@VALUE1", SqlDbType.VarChar)).Value = null;                //PARAM 5                if (sValue2 != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@VALUE2", SqlDbType.VarChar)).Value = sValue2;                else                    cmd.Parameters.Add(new SqlParameter("@VALUE2", SqlDbType.VarChar)).Value = null;                //PARAM 6                if (sValue3 != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@VALUE3", SqlDbType.VarChar)).Value = sValue3;                else                    cmd.Parameters.Add(new SqlParameter("@VALUE3", SqlDbType.VarChar)).Value = null;                //PARAM 7                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 8                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 9                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 10                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                da.SelectCommand = cmd;                dset = new DataSet();                da.Fill(dset, "DTS");                if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                {                    String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                    String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                    String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                    String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            da.Dispose();            return dset;        }        public DataSet IUDDistGeo(String sId_pais, String sId_dist, String sId_ori, String sDesc, Boolean? bVigencia, Boolean bDelete)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_DIST_GEO_IUD";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_DIST", SqlDbType.VarChar)).Value = sId_dist;                //PARAM 3                if (sId_ori != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@ID_ORI", SqlDbType.VarChar)).Value = sId_ori;                else                    cmd.Parameters.Add(new SqlParameter("@ID_ORI", SqlDbType.VarChar)).Value = null;                //PARAM 4                cmd.Parameters.Add(new SqlParameter("@DESC", SqlDbType.VarChar)).Value = sDesc;                //PARAM 5                cmd.Parameters.Add(new SqlParameter("@VIGENCIA", SqlDbType.Bit)).Value = bVigencia;                //PARAM 6                cmd.Parameters.Add(new SqlParameter("@OPERDELETE", SqlDbType.Bit)).Value = bDelete;                //PARAM 7                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 8                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 9                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 10                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                cmd.ExecuteNonQuery();                String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            return dset;        }        #endregion        #region "Distribución Geográfica Concesionarias"        public DataSet GetDistGeoConcec(String sId_pais, String sId_dist, String sId_conces)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlDataAdapter da = new SqlDataAdapter();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_DIST_CONCES_Get";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_DIST", SqlDbType.VarChar)).Value = sId_dist;                //PARAM 3                cmd.Parameters.Add(new SqlParameter("@ID_CONCES", SqlDbType.VarChar)).Value = sId_conces;                //PARAM 4                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 5                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 6                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 7                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                da.SelectCommand = cmd;                dset = new DataSet();                da.Fill(dset, "DTS");                if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                {                    String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                    String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                    String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                    String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            da.Dispose();            return dset;        }        public DataSet IUDDistGeoConcec(String sId_pais, String sId_dist, String sId_conces, String sDesc, Boolean? bVigencia, Boolean bDelete)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_DIST_CONCES_IUD";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_DIST", SqlDbType.VarChar)).Value = sId_dist;                //PARAM 3                cmd.Parameters.Add(new SqlParameter("@ID_CONCES", SqlDbType.VarChar)).Value = sId_conces;                //PARAM 4                cmd.Parameters.Add(new SqlParameter("@DESC", SqlDbType.VarChar)).Value = sDesc;                //PARAM 5                cmd.Parameters.Add(new SqlParameter("@VIGENCIA", SqlDbType.Bit)).Value = bVigencia;                //PARAM 6                cmd.Parameters.Add(new SqlParameter("@OPERDELETE", SqlDbType.Bit)).Value = bDelete;                //PARAM 7                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 8                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 9                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 10                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                cmd.ExecuteNonQuery();                String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            return dset;        }        #endregion        #region "Categorias Vehículos"        public DataSet GetCatVeh(String sId_pais, String sId_marca, String sId_modelo, String sId_version, String sId_cat)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlDataAdapter da = new SqlDataAdapter();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_CAT_VEH_Get";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_MODELO", SqlDbType.VarChar)).Value = sId_modelo;                //PARAM 3                cmd.Parameters.Add(new SqlParameter("@ID_VERSION", SqlDbType.VarChar)).Value = sId_version;                //PARAM 4                cmd.Parameters.Add(new SqlParameter("@ID_CAT", SqlDbType.VarChar)).Value = sId_cat;                //PARAM 5                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 6                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 7                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 8                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                da.SelectCommand = cmd;                dset = new DataSet();                da.Fill(dset, "DTS");                if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                {                    String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                    String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                    String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                    String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            da.Dispose();            return dset;        }        public DataSet IDCatVeh(String sId_pais, String sId_marca, String sId_modelo, String sId_version, String sId_cat, Boolean bDelete)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_CAT_VEH_IUD";                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                cmd.Parameters.Add(new SqlParameter("@ID_MODELO", SqlDbType.VarChar)).Value = sId_modelo;                cmd.Parameters.Add(new SqlParameter("@ID_VERSION", SqlDbType.VarChar)).Value = sId_version;                cmd.Parameters.Add(new SqlParameter("@ID_CAT", SqlDbType.VarChar)).Value = sId_cat;                cmd.Parameters.Add(new SqlParameter("@OPERDELETE", SqlDbType.Bit)).Value = bDelete;                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                cmd.ExecuteNonQuery();                String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            return dset;        }        #endregion        #region "Categoria - Características Vehículos (Detalle)"        public DataSet GetCatCarVeh(String sId_pais, String sId_marca, String sId_modelo, String sId_version, String sId_cat, String sId_car, String sId_tipo)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlDataAdapter da = new SqlDataAdapter();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_CATCAR_VEH_Get";                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                cmd.Parameters.Add(new SqlParameter("@ID_MODELO", SqlDbType.VarChar)).Value = sId_modelo;                cmd.Parameters.Add(new SqlParameter("@ID_VERSION", SqlDbType.VarChar)).Value = sId_version;                cmd.Parameters.Add(new SqlParameter("@ID_CAT", SqlDbType.VarChar)).Value = sId_cat;                cmd.Parameters.Add(new SqlParameter("@ID_CAR", SqlDbType.VarChar)).Value = sId_car;                cmd.Parameters.Add(new SqlParameter("@TIPO", SqlDbType.VarChar)).Value = sId_tipo;                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                da.SelectCommand = cmd;                dset = new DataSet();                da.Fill(dset, "CatCar");                if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                {                    String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                    String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                    String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                    String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            da.Dispose();            return dset;        }        public DataSet IUDCatCarVeh(String sId_pais, String sId_marca, String sId_modelo, String sId_version, String sId_cat, String sId_tipo, String sId_car, String sCaract, String sDesc, Boolean bDelete)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_CATCAR_VEH_IUD";                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                cmd.Parameters.Add(new SqlParameter("@ID_MODELO", SqlDbType.VarChar)).Value = sId_modelo;                cmd.Parameters.Add(new SqlParameter("@ID_VERSION", SqlDbType.VarChar)).Value = sId_version;                cmd.Parameters.Add(new SqlParameter("@ID_CAT", SqlDbType.VarChar)).Value = sId_cat;                cmd.Parameters.Add(new SqlParameter("@ID_CAR", SqlDbType.VarChar)).Value = sId_car;                cmd.Parameters.Add(new SqlParameter("@TIPO", SqlDbType.VarChar)).Value = sId_tipo;                cmd.Parameters.Add(new SqlParameter("@DESC", SqlDbType.VarChar)).Value = sDesc;                cmd.Parameters.Add(new SqlParameter("@OPERDELETE", SqlDbType.Bit)).Value = bDelete;                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                cmd.ExecuteNonQuery();                String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            return dset;        }        #endregion        #region "Características Vehículos"        public DataSet GetCarVeh(String sId_pais, String sId_marca, String sId_car, String sId_tipo)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlDataAdapter da = new SqlDataAdapter();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_CAR_VEH_Get";                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                cmd.Parameters.Add(new SqlParameter("@ID_CAR", SqlDbType.VarChar)).Value = sId_car;                cmd.Parameters.Add(new SqlParameter("@TIPO", SqlDbType.VarChar)).Value = sId_tipo;                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 9                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 10                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 11                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                da.SelectCommand = cmd;                dset = new DataSet();                da.Fill(dset, "DTS");                if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                {                    String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                    String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                    String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                    String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            da.Dispose();            return dset;        }        public DataSet IUDCarVeh(String sId_pais, String sId_marca, String sId_car, String sId_tipo, String sCaract, Int32 iOrderCar, Boolean bVigencia, Boolean bDelete)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_CAR_VEH_IUD";                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                cmd.Parameters.Add(new SqlParameter("@ID_CAR", SqlDbType.VarChar)).Value = sId_car;                cmd.Parameters.Add(new SqlParameter("@TIPO", SqlDbType.VarChar)).Value = sId_tipo;                cmd.Parameters.Add(new SqlParameter("@CARACT", SqlDbType.VarChar)).Value = sCaract;                cmd.Parameters.Add(new SqlParameter("@ORDER_CAR", SqlDbType.Int)).Value = iOrderCar;                cmd.Parameters.Add(new SqlParameter("@VIGENCIA", SqlDbType.Bit)).Value = bVigencia;                cmd.Parameters.Add(new SqlParameter("@OPERDELETE", SqlDbType.Bit)).Value = bDelete;                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                cmd.ExecuteNonQuery();                String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            return dset;        }        #endregion        #region "Comparador de Vehículos"                    public DataSet GetComparador_Cat_Vehiculos(String sId_pais, String sId_marca, String sId_cat, String sId_modelo_1, String sId_version_1, String sId_modelo_2, String sId_version_2, String sId_modelo_3, String sId_version_3, String sId_modelo_4, String sId_version_4)            {                SqlConnection cn = new SqlConnection();                SqlCommand cmd = new SqlCommand();                SqlDataAdapter da = new SqlDataAdapter();                SqlParameter prm = new SqlParameter();                DataSet dset = null;                String sXml = String.Empty;                try                {                    cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                    cn.Open();                    cmd.Connection = cn;                    cmd.CommandType = CommandType.StoredProcedure;                    cmd.CommandText = "sp_IND_COMPARADOR_CAT_VEH";                    cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                    cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                    cmd.Parameters.Add(new SqlParameter("@ID_CAT", SqlDbType.VarChar)).Value = sId_cat;                    cmd.Parameters.Add(new SqlParameter("@ID_MODELO_1", SqlDbType.VarChar)).Value = sId_modelo_1;                    cmd.Parameters.Add(new SqlParameter("@ID_VERSION_1", SqlDbType.VarChar)).Value = sId_version_1;                    cmd.Parameters.Add(new SqlParameter("@ID_MODELO_2", SqlDbType.VarChar)).Value = sId_modelo_2;                    cmd.Parameters.Add(new SqlParameter("@ID_VERSION_2", SqlDbType.VarChar)).Value = sId_version_2;                    cmd.Parameters.Add(new SqlParameter("@ID_MODELO_3", SqlDbType.VarChar)).Value = sId_modelo_3;                    cmd.Parameters.Add(new SqlParameter("@ID_VERSION_3", SqlDbType.VarChar)).Value = sId_version_3;                    cmd.Parameters.Add(new SqlParameter("@ID_MODELO_4", SqlDbType.VarChar)).Value = sId_modelo_4;                    cmd.Parameters.Add(new SqlParameter("@ID_VERSION_4", SqlDbType.VarChar)).Value = sId_version_4;                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_NUMBER";                    prm.SqlDbType = SqlDbType.Int;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_PROCEDURE";                    prm.SqlDbType = SqlDbType.VarChar;                    prm.Size = 126;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_LINE";                    prm.SqlDbType = SqlDbType.Int;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_MESSAGE";                    prm.SqlDbType = SqlDbType.VarChar;                    prm.Size = 1024;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    da.SelectCommand = cmd;                    dset = new DataSet();                    da.Fill(dset, "CatCar");                    if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                    {                        String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                        String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                        String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                        String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                        sXml = String.Empty;                        sXml = sXml + "<NewDataSet>";                        sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                        sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                        sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                        sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                        sXml = sXml + "</NewDataSet>";                        dset = Library.transforma_xml_rs(sXml);                    }                }                catch (SqlException sqlex)                {                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }                catch (Exception ex)                {                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }                cn.Close();                cn.Dispose();                cmd.Dispose();                da.Dispose();                return dset;            }            public DataSet GetComparador_Car_Vehiculos(String sId_pais, String sId_marca, String sId_cat, String sId_tipo, String sId_modelo_1, String sId_version_1, String sId_modelo_2, String sId_version_2, String sId_modelo_3, String sId_version_3, String sId_modelo_4, String sId_version_4)            {                SqlConnection cn = new SqlConnection();                SqlCommand cmd = new SqlCommand();                SqlDataAdapter da = new SqlDataAdapter();                SqlParameter prm = new SqlParameter();                DataSet dset = null;                String sXml = String.Empty;                try                {                    cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                    cn.Open();                    cmd.Connection = cn;                    cmd.CommandType = CommandType.StoredProcedure;                    cmd.CommandText = "sp_IND_COMPARADOR_CAR_VEH";                    cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                    cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                    cmd.Parameters.Add(new SqlParameter("@ID_CAT", SqlDbType.VarChar)).Value = sId_cat;                    cmd.Parameters.Add(new SqlParameter("@TIPO", SqlDbType.VarChar)).Value = sId_tipo;                    cmd.Parameters.Add(new SqlParameter("@ID_MODELO_1", SqlDbType.VarChar)).Value = sId_modelo_1;                    cmd.Parameters.Add(new SqlParameter("@ID_VERSION_1", SqlDbType.VarChar)).Value = sId_version_1;                    cmd.Parameters.Add(new SqlParameter("@ID_MODELO_2", SqlDbType.VarChar)).Value = sId_modelo_2;                    cmd.Parameters.Add(new SqlParameter("@ID_VERSION_2", SqlDbType.VarChar)).Value = sId_version_2;                    cmd.Parameters.Add(new SqlParameter("@ID_MODELO_3", SqlDbType.VarChar)).Value = sId_modelo_3;                    cmd.Parameters.Add(new SqlParameter("@ID_VERSION_3", SqlDbType.VarChar)).Value = sId_version_3;                    cmd.Parameters.Add(new SqlParameter("@ID_MODELO_4", SqlDbType.VarChar)).Value = sId_modelo_4;                    cmd.Parameters.Add(new SqlParameter("@ID_VERSION_4", SqlDbType.VarChar)).Value = sId_version_4;                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_NUMBER";                    prm.SqlDbType = SqlDbType.Int;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_PROCEDURE";                    prm.SqlDbType = SqlDbType.VarChar;                    prm.Size = 126;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_LINE";                    prm.SqlDbType = SqlDbType.Int;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_MESSAGE";                    prm.SqlDbType = SqlDbType.VarChar;                    prm.Size = 1024;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    da.SelectCommand = cmd;                    dset = new DataSet();                    da.Fill(dset, "CatCar");                    if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                    {                        String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                        String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                        String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                        String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                        sXml = String.Empty;                        sXml = sXml + "<NewDataSet>";                        sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                        sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                        sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                        sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                        sXml = sXml + "</NewDataSet>";                        dset = Library.transforma_xml_rs(sXml);                    }                }                catch (SqlException sqlex)                {                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }                catch (Exception ex)                {                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }                cn.Close();                cn.Dispose();                cmd.Dispose();                da.Dispose();                return dset;            }        #endregion        #region "Contactos"        public DataSet GetContacto(String sId_pais, String sId_marca, String sId_contact, String sId_estado, String sFecha_Ini, String sFecha_Fin)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlDataAdapter da = new SqlDataAdapter();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_CONTACTO_Get";                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                cmd.Parameters.Add(new SqlParameter("@ID_CONTACT", SqlDbType.VarChar)).Value = sId_contact;                cmd.Parameters.Add(new SqlParameter("@ID_ESTADO", SqlDbType.VarChar)).Value = sId_estado;                if (sFecha_Ini != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@FECHA_INI", SqlDbType.VarChar)).Value = sFecha_Ini;                else                    cmd.Parameters.Add(new SqlParameter("@FECHA_INI", SqlDbType.VarChar)).Value = null;                if (sFecha_Fin != null)                    cmd.Parameters.Add(new SqlParameter("@FECHA_FIN", SqlDbType.VarChar)).Value = sFecha_Fin;                else                    cmd.Parameters.Add(new SqlParameter("@FECHA_FIN", SqlDbType.VarChar)).Value = null;                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                da.SelectCommand = cmd;                dset = new DataSet();                da.Fill(dset, "DTS");                if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                {                    String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                    String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                    String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                    String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            da.Dispose();            return dset;        }        public DataSet IUDContacto(String sId_pais, String sId_marca, String sId_contact, String sNombre, String sApellidos, String sDin, String sId_Mot,                                    String sDireccion, String sSector, String sMail, String sId_Dist1, String sId_Dist2, String sId_Dist3, String sCod_fono1,                                    String sFono1, String sCod_fono2, String sFono2, String sCod_fono_emp, String sFono_Emp, String sComentario, String sId_Estado,                                    String sId_Tipo, String sId_Dist_1_Conces, String sId_Conces, String sMarca_Actual, String sModelo_Actual, String sMatricula, String sAnioVehActual,                                     String sVehProbar, String sVIN, Boolean bDelete)        {            Int64? iId_contact = null;            if (sId_contact != String.Empty)                iId_contact = Convert.ToInt64(sId_contact);            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_CONTACTO_IUD";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                //PARAM 3                //cmd.Parameters.Add(new SqlParameter("@ID_CONTACT", SqlDbType.BigInt)).Value = iId_contact;                prm = cmd.CreateParameter();                prm.ParameterName = "@ID_CONTACT";                prm.SqlDbType = SqlDbType.BigInt;                prm.Direction = ParameterDirection.InputOutput;                prm.Value = iId_contact;                cmd.Parameters.Add(prm);                //PARAM 4                if (sNombre != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@NOMBRES", SqlDbType.VarChar)).Value = sNombre;                else                    cmd.Parameters.Add(new SqlParameter("@NOMBRES", SqlDbType.VarChar)).Value = null;                //PARAM 5                if (sApellidos != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@APELLIDOS", SqlDbType.VarChar)).Value = sApellidos;                else                    cmd.Parameters.Add(new SqlParameter("@APELLIDOS", SqlDbType.VarChar)).Value = null;                //PARAM 6                if (sDin != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@DIN", SqlDbType.VarChar)).Value = sDin;                else                    cmd.Parameters.Add(new SqlParameter("@DIN", SqlDbType.VarChar)).Value = null;                //PARAM 7                if (sId_Mot != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@ID_MOT", SqlDbType.VarChar)).Value = sId_Mot;                else                    cmd.Parameters.Add(new SqlParameter("@ID_MOT", SqlDbType.VarChar)).Value = null;                //PARAM 8                if (sDireccion != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@DIRECCION", SqlDbType.VarChar)).Value = sDireccion;                else                    cmd.Parameters.Add(new SqlParameter("@DIRECCION", SqlDbType.VarChar)).Value = null;                //PARAM 9                if (sSector != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@SECTOR", SqlDbType.VarChar)).Value = sSector;                else                    cmd.Parameters.Add(new SqlParameter("@SECTOR", SqlDbType.VarChar)).Value = null;                //PARAM 10                if (sMail != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@MAIL", SqlDbType.VarChar)).Value = sMail;                else                    cmd.Parameters.Add(new SqlParameter("@MAIL", SqlDbType.VarChar)).Value = null;                //PARAM 11                if (sId_Dist1 != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@ID_DIST_1", SqlDbType.VarChar)).Value = sId_Dist1;                else                    cmd.Parameters.Add(new SqlParameter("@ID_DIST_1", SqlDbType.VarChar)).Value = null;                //PARAM 12                if (sId_Dist2 != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@ID_DIST_2", SqlDbType.VarChar)).Value = sId_Dist2;                else                    cmd.Parameters.Add(new SqlParameter("@ID_DIST_2", SqlDbType.VarChar)).Value = null;                //PARAM 13                if (sId_Dist3 != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@ID_DIST_3", SqlDbType.VarChar)).Value = sId_Dist3;                else                    cmd.Parameters.Add(new SqlParameter("@ID_DIST_3", SqlDbType.VarChar)).Value = null;                //PARAM 14                if (sCod_fono1 != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@COD_FONO1", SqlDbType.VarChar)).Value = sCod_fono1;                else                    cmd.Parameters.Add(new SqlParameter("@COD_FONO1", SqlDbType.VarChar)).Value = null;                //PARAM 15                if (sFono1 != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@FONO", SqlDbType.VarChar)).Value = sFono1;                else                    cmd.Parameters.Add(new SqlParameter("@FONO", SqlDbType.VarChar)).Value = null;                //PARAM 16                if (sCod_fono2 != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@COD_FONO2", SqlDbType.VarChar)).Value = sCod_fono2;                else                    cmd.Parameters.Add(new SqlParameter("@COD_FONO2", SqlDbType.VarChar)).Value = null;                //PARAM 17                if (sFono2 != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@FONO2", SqlDbType.VarChar)).Value = sFono2;                else                    cmd.Parameters.Add(new SqlParameter("@FONO2", SqlDbType.VarChar)).Value = null;                //PARAM 18                if (sCod_fono_emp != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@COD_FONO_EMP", SqlDbType.VarChar)).Value = sCod_fono_emp;                else                    cmd.Parameters.Add(new SqlParameter("@COD_FONO_EMP", SqlDbType.VarChar)).Value = null;                //PARAM 19                if (sFono_Emp != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@FONO_EMP", SqlDbType.VarChar)).Value = sFono_Emp;                else                    cmd.Parameters.Add(new SqlParameter("@FONO_EMP", SqlDbType.VarChar)).Value = null;                //PARAM 20                if (sComentario != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@COMENTARIO", SqlDbType.VarChar)).Value = sComentario;                else                    cmd.Parameters.Add(new SqlParameter("@COMENTARIO", SqlDbType.VarChar)).Value = null;                //PARAM 21                cmd.Parameters.Add(new SqlParameter("@ID_ESTADO", SqlDbType.VarChar)).Value = sId_Estado;                //PARAM 22                cmd.Parameters.Add(new SqlParameter("@ID_TIPO", SqlDbType.VarChar)).Value = sId_Tipo;                //PARAM 23                if (sId_Dist_1_Conces != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@ID_DIST_1_CONCES", SqlDbType.VarChar)).Value = sId_Dist_1_Conces;                else                    cmd.Parameters.Add(new SqlParameter("@ID_DIST_1_CONCES", SqlDbType.VarChar)).Value = null;                //PARAM 24                if (sId_Conces != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@ID_CONCES", SqlDbType.VarChar)).Value = sId_Conces;                else                    cmd.Parameters.Add(new SqlParameter("@ID_CONCES", SqlDbType.VarChar)).Value = null;                //PARAM 25                if (sMarca_Actual != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@MARCA_ACTUAL", SqlDbType.VarChar)).Value = sMarca_Actual;                else                    cmd.Parameters.Add(new SqlParameter("@MARCA_ACTUAL", SqlDbType.VarChar)).Value = null;                //PARAM 26                if (sModelo_Actual != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@MODELO_ACTUAL", SqlDbType.VarChar)).Value = sModelo_Actual;                else                    cmd.Parameters.Add(new SqlParameter("@MODELO_ACTUAL", SqlDbType.VarChar)).Value = null;                //PARAM 27                if (sMatricula != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@MATRICULA", SqlDbType.VarChar)).Value = sMatricula;                else                    cmd.Parameters.Add(new SqlParameter("@MATRICULA", SqlDbType.VarChar)).Value = null;                //PARAM 28                if (sAnioVehActual != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@ANIOVEHICULOACTUAL", SqlDbType.VarChar)).Value = sAnioVehActual;                else                    cmd.Parameters.Add(new SqlParameter("@ANIOVEHICULOACTUAL", SqlDbType.VarChar)).Value = null;                //PARAM 29                if (sVehProbar != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@ID_MODELO_PROBAR", SqlDbType.VarChar)).Value = sVehProbar;                else                    cmd.Parameters.Add(new SqlParameter("@ID_MODELO_PROBAR", SqlDbType.VarChar)).Value = null;                //PARAM 30                if (sVIN != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@VIN", SqlDbType.VarChar)).Value = sVIN;                else                    cmd.Parameters.Add(new SqlParameter("@VIN", SqlDbType.VarChar)).Value = null;                //PARAM 31                cmd.Parameters.Add(new SqlParameter("@OPERDELETE", SqlDbType.Bit)).Value = bDelete;                //PARAM 32                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 33                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 34                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 35                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                cmd.ExecuteNonQuery();                String sId_Contac = cmd.Parameters["@ID_CONTACT"].Value.ToString();                String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ID_CONTAC>" + sId_Contac + "</ID_CONTAC>";                sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            return dset;        }        #endregion        #region "Cotización"        public DataSet GetCotizacion(String sId_pais, String sId_marca, String sId_cotizacion, String sId_estado, String sFecha_Ini, String sFecha_Fin)        {            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlDataAdapter da = new SqlDataAdapter();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_COTIZACION_Get";                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                cmd.Parameters.Add(new SqlParameter("@ID_COTIZ", SqlDbType.VarChar)).Value = sId_cotizacion;                cmd.Parameters.Add(new SqlParameter("@ID_ESTADO", SqlDbType.VarChar)).Value = sId_estado;                if (sFecha_Ini != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@FECHA_INI", SqlDbType.VarChar)).Value = sFecha_Ini;                else                    cmd.Parameters.Add(new SqlParameter("@FECHA_INI", SqlDbType.VarChar)).Value = null;                if (sFecha_Fin != null)                    cmd.Parameters.Add(new SqlParameter("@FECHA_FIN", SqlDbType.VarChar)).Value = sFecha_Fin;                else                    cmd.Parameters.Add(new SqlParameter("@FECHA_FIN", SqlDbType.VarChar)).Value = null;                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                da.SelectCommand = cmd;                dset = new DataSet();                da.Fill(dset, "DTS");                if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                {                    String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                    String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                    String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                    String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            da.Dispose();            return dset;        }        public DataSet IUDCotizacion(String sId_pais, String sId_marca, String sId_cotizacion, String sId_Modelo, String sId_Version, String sDin,                                        String sNombres, String sApellidos, String sDireccion, String sId_Dist1, String sId_Dist2, String sId_Dist3,                                        String sId_Dist1_Conces, String sId_Conces, String sFono, String sMail, String sId_Estado, String sId_Tipo, String sFecNac, Boolean bDelete)        {            Int64? iId_cotizacion = null;            if (sId_cotizacion != String.Empty)                iId_cotizacion = Convert.ToInt64(sId_cotizacion);            SqlConnection cn = new SqlConnection();            SqlCommand cmd = new SqlCommand();            SqlParameter prm = new SqlParameter();            DataSet dset = null;            String sXml = String.Empty;            try            {                cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                cn.Open();                cmd.Connection = cn;                cmd.CommandType = CommandType.StoredProcedure;                cmd.CommandText = "sp_IND_COTIZACION_IUD";                //PARAM 1                cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                //PARAM 2                cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value = sId_marca;                //PARAM 3                prm = cmd.CreateParameter();                prm.ParameterName = "@ID_COTIZ";                prm.SqlDbType = SqlDbType.BigInt;                prm.Direction = ParameterDirection.InputOutput;                prm.Value = iId_cotizacion;                cmd.Parameters.Add(prm);                //PARAM 4                if (sId_Modelo != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@ID_MODELO", SqlDbType.VarChar)).Value = sId_Modelo;                else                    cmd.Parameters.Add(new SqlParameter("@ID_MODELO", SqlDbType.VarChar)).Value = null;                //PARAM 5                if (sId_Version != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@ID_VERSION", SqlDbType.VarChar)).Value = sId_Version;                else                    cmd.Parameters.Add(new SqlParameter("@ID_VERSION", SqlDbType.VarChar)).Value = null;                //PARAM 6                if (sDin != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@DIN", SqlDbType.VarChar)).Value = sDin;                else                    cmd.Parameters.Add(new SqlParameter("@DIN", SqlDbType.VarChar)).Value = null;                //PARAM 7                if (sNombres != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@NOMBRES", SqlDbType.VarChar)).Value = sNombres;                else                    cmd.Parameters.Add(new SqlParameter("@NOMBRES", SqlDbType.VarChar)).Value = null;                //PARAM 8                if (sApellidos != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@APELLIDOS", SqlDbType.VarChar)).Value = sApellidos;                else                    cmd.Parameters.Add(new SqlParameter("@APELLIDOS", SqlDbType.VarChar)).Value = null;                //PARAM 9                if (sDireccion != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@DIRECCION", SqlDbType.VarChar)).Value = sDireccion;                else                    cmd.Parameters.Add(new SqlParameter("@DIRECCION", SqlDbType.VarChar)).Value = null;                //PARAM 10                if (sId_Dist1 != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@ID_DIST_1", SqlDbType.VarChar)).Value = sId_Dist1;                else                    cmd.Parameters.Add(new SqlParameter("@ID_DIST_1", SqlDbType.VarChar)).Value = null;                //PARAM 11                if (sId_Dist2 != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@ID_DIST_2", SqlDbType.VarChar)).Value = sId_Dist2;                else                    cmd.Parameters.Add(new SqlParameter("@ID_DIST_2", SqlDbType.VarChar)).Value = null;                //PARAM 12                if (sId_Dist3 != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@ID_DIST_3", SqlDbType.VarChar)).Value = sId_Dist3;                else                    cmd.Parameters.Add(new SqlParameter("@ID_DIST_3", SqlDbType.VarChar)).Value = null;                //PARAM 13                if (sId_Dist1_Conces != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@ID_DIST_1_CONCES", SqlDbType.VarChar)).Value = sId_Dist1_Conces;                else                    cmd.Parameters.Add(new SqlParameter("@ID_DIST_1_CONCES", SqlDbType.VarChar)).Value = null;                //PARAM 14                if (sId_Conces != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@ID_CONCES", SqlDbType.VarChar)).Value = sId_Conces;                else                    cmd.Parameters.Add(new SqlParameter("@ID_CONCES", SqlDbType.VarChar)).Value = null;                //PARAM 15                if (sFono != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@FONO", SqlDbType.VarChar)).Value = sFono;                else                    cmd.Parameters.Add(new SqlParameter("@FONO", SqlDbType.VarChar)).Value = null;                //PARAM 16                if (sMail != String.Empty)                    cmd.Parameters.Add(new SqlParameter("@MAIL", SqlDbType.VarChar)).Value = sMail;                else                    cmd.Parameters.Add(new SqlParameter("@MAIL", SqlDbType.VarChar)).Value = null;                //PARAM 17                cmd.Parameters.Add(new SqlParameter("@ID_ESTADO", SqlDbType.VarChar)).Value = sId_Estado;                //PARAM 18                cmd.Parameters.Add(new SqlParameter("@ID_TIPO", SqlDbType.VarChar)).Value = sId_Tipo;                //PARAM 18                cmd.Parameters.Add(new SqlParameter("@FECHA_NAC", SqlDbType.VarChar)).Value = sFecNac;                //PARAM 19                cmd.Parameters.Add(new SqlParameter("@OPERDELETE", SqlDbType.Bit)).Value = bDelete;                //PARAM 20                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_NUMBER";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 21                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_PROCEDURE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 126;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 22                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_LINE";                prm.SqlDbType = SqlDbType.Int;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                //PARAM 23                prm = cmd.CreateParameter();                prm.ParameterName = "@ERROR_MESSAGE";                prm.SqlDbType = SqlDbType.VarChar;                prm.Size = 1024;                prm.Direction = ParameterDirection.Output;                cmd.Parameters.Add(prm);                cmd.ExecuteNonQuery();                String sId_Cotiz = cmd.Parameters["@ID_COTIZ"].Value.ToString();                String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ID_COTIZ>" + sId_Cotiz + "</ID_COTIZ>";                sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (SqlException sqlex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            catch (Exception ex)            {                sXml = String.Empty;                sXml = sXml + "<NewDataSet>";                sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                sXml = sXml + "</NewDataSet>";                dset = Library.transforma_xml_rs(sXml);            }            cn.Close();            cn.Dispose();            cmd.Dispose();            return dset;        }        #endregion        #region "Usuario"            public DataSet GetUsuario(String sId_pais, String sUser, String sPassw)            {                SqlConnection cn = new SqlConnection();                SqlCommand cmd = new SqlCommand();                SqlDataAdapter da = new SqlDataAdapter();                SqlParameter prm = new SqlParameter();                DataSet dset = null;                String sXml = String.Empty;                try                {                    cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                    cn.Open();                    cmd.Connection = cn;                    cmd.CommandType = CommandType.StoredProcedure;                    cmd.CommandText = "sp_IND_USUARIO_Get";                    cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                    cmd.Parameters.Add(new SqlParameter("@USER", SqlDbType.VarChar)).Value = sUser;                    cmd.Parameters.Add(new SqlParameter("@PSW_USER", SqlDbType.VarChar)).Value = sPassw;                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_NUMBER";                    prm.SqlDbType = SqlDbType.Int;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_PROCEDURE";                    prm.SqlDbType = SqlDbType.VarChar;                    prm.Size = 126;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_LINE";                    prm.SqlDbType = SqlDbType.Int;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_MESSAGE";                    prm.SqlDbType = SqlDbType.VarChar;                    prm.Size = 1024;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    da.SelectCommand = cmd;                    dset = new DataSet();                    da.Fill(dset, "DTS");                    if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                    {                        String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                        String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                        String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                        String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                        sXml = String.Empty;                        sXml = sXml + "<NewDataSet>";                        sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                        sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                        sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                        sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                        sXml = sXml + "</NewDataSet>";                        dset = Library.transforma_xml_rs(sXml);                    }                }                catch (SqlException sqlex)                {                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }                catch (Exception ex)                {                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }                cn.Close();                cn.Dispose();                cmd.Dispose();                da.Dispose();                return dset;            }        #endregion        #region "Precios"            public DataSet GetPrecios(String sId_pais, String sVigencia, String sFechaVigencia, String sId_Modelo, String sId_Version)            {                SqlConnection cn = new SqlConnection();                SqlCommand cmd = new SqlCommand();                SqlDataAdapter da = new SqlDataAdapter();                SqlParameter prm = new SqlParameter();                DataSet dset = null;                String sXml = String.Empty;                try                {                    cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                    cn.Open();                    cmd.Connection = cn;                    cmd.CommandType = CommandType.StoredProcedure;                    cmd.CommandText = "sp_IND_VIG_PRECIO_GetALL";                    cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                    cmd.Parameters.Add(new SqlParameter("@VIGENCIA", SqlDbType.VarChar)).Value = sVigencia;                    cmd.Parameters.Add(new SqlParameter("@FECHA_VIGENCIA", SqlDbType.VarChar)).Value = sFechaVigencia;                    cmd.Parameters.Add(new SqlParameter("@ID_MODELO", SqlDbType.VarChar)).Value = sId_Modelo;                    cmd.Parameters.Add(new SqlParameter("@ID_VERSION", SqlDbType.VarChar)).Value = sId_Version;                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_NUMBER";                    prm.SqlDbType = SqlDbType.Int;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_PROCEDURE";                    prm.SqlDbType = SqlDbType.VarChar;                    prm.Size = 126;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_LINE";                    prm.SqlDbType = SqlDbType.Int;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_MESSAGE";                    prm.SqlDbType = SqlDbType.VarChar;                    prm.Size = 1024;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    da.SelectCommand = cmd;                    dset = new DataSet();                    da.Fill(dset, "DTS");                    if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                    {                        String sError_Number        = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                        String sError_Procedure     = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                        String sError_Line          = cmd.Parameters["@ERROR_LINE"].Value.ToString();                        String sError_Message       = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                        sXml = String.Empty;                        sXml = sXml + "<NewDataSet>";                        sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                        sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                        sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                        sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                        sXml = sXml + "</NewDataSet>";                        dset = Library.transforma_xml_rs(sXml);                    }                }                catch (SqlException sqlex)                {                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }                catch (Exception ex)                {                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }                cn.Close();                cn.Dispose();                cmd.Dispose();                da.Dispose();                return dset;            }            public DataSet GetPrecios_MAXFECHA(String sId_pais, String sVigencia, String sFechaVigencia, String sId_Modelo, String sId_Version)            {                SqlConnection cn = new SqlConnection();                SqlCommand cmd = new SqlCommand();                SqlDataAdapter da = new SqlDataAdapter();                SqlParameter prm = new SqlParameter();                DataSet dset = null;                String sXml = String.Empty;                try                {                    cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                    cn.Open();                    cmd.Connection = cn;                    cmd.CommandType = CommandType.StoredProcedure;                    cmd.CommandText = "sp_IND_VIG_PRECIO_GetALL_MAXFECHA";                    cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value = sId_pais;                    cmd.Parameters.Add(new SqlParameter("@VIGENCIA", SqlDbType.VarChar)).Value = sVigencia;                    cmd.Parameters.Add(new SqlParameter("@FECHA_VIGENCIA", SqlDbType.VarChar)).Value = sFechaVigencia;                    cmd.Parameters.Add(new SqlParameter("@ID_MODELO", SqlDbType.VarChar)).Value = sId_Modelo;                    cmd.Parameters.Add(new SqlParameter("@ID_VERSION", SqlDbType.VarChar)).Value = sId_Version;                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_NUMBER";                    prm.SqlDbType = SqlDbType.Int;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_PROCEDURE";                    prm.SqlDbType = SqlDbType.VarChar;                    prm.Size = 126;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_LINE";                    prm.SqlDbType = SqlDbType.Int;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_MESSAGE";                    prm.SqlDbType = SqlDbType.VarChar;                    prm.Size = 1024;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    da.SelectCommand = cmd;                    dset = new DataSet();                    da.Fill(dset, "DTS");                    if (!cmd.Parameters["@ERROR_NUMBER"].Value.ToString().Equals(""))                    {                        String sError_Number = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                        String sError_Procedure = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                        String sError_Line = cmd.Parameters["@ERROR_LINE"].Value.ToString();                        String sError_Message = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                        sXml = String.Empty;                        sXml = sXml + "<NewDataSet>";                        sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                        sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                        sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                        sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                        sXml = sXml + "</NewDataSet>";                        dset = Library.transforma_xml_rs(sXml);                    }                }                catch (SqlException sqlex)                {                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }                catch (Exception ex)                {                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }                cn.Close();                cn.Dispose();                cmd.Dispose();                da.Dispose();                return dset;            }            public DataSet IUDPrecio(String sId_pais, String sId_marca, String sId_modelo, String sId_version, String sFecha_vig, String sHora_vig, Int64 iPrecio, Int64? iPrecio_2, Int64? iBono, Int64? iBono_Fin, Boolean bDelete)            {                SqlConnection cn = new SqlConnection();                SqlCommand cmd = new SqlCommand();                SqlParameter prm = new SqlParameter();                DataSet dset = null;                String sXml = String.Empty;                try                {                    cn.ConnectionString = ConfigurationManager.ConnectionStrings["Subaru_ConnectionString"].ConnectionString;                    cn.Open();                    cmd.Connection = cn;                    cmd.CommandType = CommandType.StoredProcedure;                    cmd.CommandText = "sp_IND_VIG_PRECIO_IUD";                    cmd.Parameters.Add(new SqlParameter("@ID_PAIS", SqlDbType.VarChar)).Value       = sId_pais;                    cmd.Parameters.Add(new SqlParameter("@ID_MARCA", SqlDbType.VarChar)).Value      = sId_marca;                    cmd.Parameters.Add(new SqlParameter("@ID_MODELO", SqlDbType.VarChar)).Value     = sId_modelo;                    cmd.Parameters.Add(new SqlParameter("@ID_VERSION", SqlDbType.VarChar)).Value    = sId_version;                    cmd.Parameters.Add(new SqlParameter("@FEC_VIG", SqlDbType.VarChar)).Value       = sFecha_vig;                    cmd.Parameters.Add(new SqlParameter("@HORA_VIG", SqlDbType.VarChar)).Value      = sHora_vig;                    cmd.Parameters.Add(new SqlParameter("@PRECIO", SqlDbType.BigInt)).Value         = iPrecio;                    cmd.Parameters.Add(new SqlParameter("@PRECIO_2", SqlDbType.BigInt)).Value       = iPrecio_2;                    cmd.Parameters.Add(new SqlParameter("@BONO", SqlDbType.BigInt)).Value           = iBono;                    cmd.Parameters.Add(new SqlParameter("@BONO_FIN", SqlDbType.BigInt)).Value       = iBono_Fin;                    cmd.Parameters.Add(new SqlParameter("@OPERDELETE", SqlDbType.Bit)).Value        = bDelete;                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_NUMBER";                    prm.SqlDbType = SqlDbType.Int;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_PROCEDURE";                    prm.SqlDbType = SqlDbType.VarChar;                    prm.Size = 126;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_LINE";                    prm.SqlDbType = SqlDbType.Int;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    prm = cmd.CreateParameter();                    prm.ParameterName = "@ERROR_MESSAGE";                    prm.SqlDbType = SqlDbType.VarChar;                    prm.Size = 1024;                    prm.Direction = ParameterDirection.Output;                    cmd.Parameters.Add(prm);                    cmd.ExecuteNonQuery();                    String sError_Number        = cmd.Parameters["@ERROR_NUMBER"].Value.ToString();                    String sError_Procedure     = cmd.Parameters["@ERROR_PROCEDURE"].Value.ToString();                    String sError_Line          = cmd.Parameters["@ERROR_LINE"].Value.ToString();                    String sError_Message       = cmd.Parameters["@ERROR_MESSAGE"].Value.ToString();                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sError_Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE>" + sError_Procedure + "</ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE>" + sError_Line + "</ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sError_Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }                catch (SqlException sqlex)                {                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER>" + sqlex.Number + "</ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + sqlex.Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }                catch (Exception ex)                {                    sXml = String.Empty;                    sXml = sXml + "<NewDataSet>";                    sXml = sXml + "<ERROR_NUMBER></ERROR_NUMBER>";                    sXml = sXml + "<ERROR_PROCEDURE></ERROR_PROCEDURE>";                    sXml = sXml + "<ERROR_LINE></ERROR_LINE>";                    sXml = sXml + "<ERROR_MESSAGE>" + ex.Message + "</ERROR_MESSAGE>";                    sXml = sXml + "</NewDataSet>";                    dset = Library.transforma_xml_rs(sXml);                }                cn.Close();                cn.Dispose();                cmd.Dispose();                return dset;            }        #endregion    }}